"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificationErrorCode = void 0;
/**
 * Indicates the failure reason of the card verification. Only present on cards with failed verification. Possible values are [verification_failed, verification_fraud_detected, verification_denied, verification_not_supported_by_issuer, verification_stopped_by_issuer, card_failed, card_invalid, card_address_mismatch, card_zip_mismatch, card_cvv_invalid, card_expired, card_limit_violated, card_not_honored, card_cvv_required, credit_card_not_allowed, card_account_ineligible, card_network_unsupported]\'
 * @export
 * @enum {string}
 */
exports.VerificationErrorCode = {
    VerificationFailed: "verification_failed",
    VerificationFraudDetected: "verification_fraud_detected",
    VerificationDenied: "verification_denied",
    VerificationNotSupportedByIssuer: "verification_not_supported_by_issuer",
    VerificationStoppedByIssuer: "verification_stopped_by_issuer",
    CardFailed: "card_failed",
    CardInvalid: "card_invalid",
    CardAddressMismatch: "card_address_mismatch",
    CardZipMismatch: "card_zip_mismatch",
    CardCvvInvalid: "card_cvv_invalid",
    CardExpired: "card_expired",
    CardLimitViolated: "card_limit_violated",
    CardNotHonored: "card_not_honored",
    CardCvvRequired: "card_cvv_required",
    CreditCardNotAllowed: "credit_card_not_allowed",
    CardAccountIneligible: "card_account_ineligible",
    CardNetworkUnsupported: "card_network_unsupported"
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZpY2F0aW9uLWVycm9yLWNvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2VuZXJhdGVkL21vZGVscy92ZXJpZmljYXRpb24tZXJyb3ItY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7OztHQUlHOzs7QUFFSDs7OztHQUlHO0FBRVUsUUFBQSxxQkFBcUIsR0FBRztJQUNuQyxrQkFBa0IsRUFBRSxxQkFBcUI7SUFDekMseUJBQXlCLEVBQUUsNkJBQTZCO0lBQ3hELGtCQUFrQixFQUFFLHFCQUFxQjtJQUN6QyxnQ0FBZ0MsRUFBRSxzQ0FBc0M7SUFDeEUsMkJBQTJCLEVBQUUsZ0NBQWdDO0lBQzdELFVBQVUsRUFBRSxhQUFhO0lBQ3pCLFdBQVcsRUFBRSxjQUFjO0lBQzNCLG1CQUFtQixFQUFFLHVCQUF1QjtJQUM1QyxlQUFlLEVBQUUsbUJBQW1CO0lBQ3BDLGNBQWMsRUFBRSxrQkFBa0I7SUFDbEMsV0FBVyxFQUFFLGNBQWM7SUFDM0IsaUJBQWlCLEVBQUUscUJBQXFCO0lBQ3hDLGNBQWMsRUFBRSxrQkFBa0I7SUFDbEMsZUFBZSxFQUFFLG1CQUFtQjtJQUNwQyxvQkFBb0IsRUFBRSx5QkFBeUI7SUFDL0MscUJBQXFCLEVBQUUseUJBQXlCO0lBQ2hELHNCQUFzQixFQUFFLDBCQUEwQjtDQUMxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE5PVEU6IFRoaXMgY2xhc3MgaXMgYXV0byBnZW5lcmF0ZWQgYnkgT3BlbkFQSSBHZW5lcmF0b3IgKGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaCkuXG4gKiBodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2hcbiAqIERvIG5vdCBlZGl0IHRoZSBjbGFzcyBtYW51YWxseS5cbiAqL1xuXG4vKipcbiAqIEluZGljYXRlcyB0aGUgZmFpbHVyZSByZWFzb24gb2YgdGhlIGNhcmQgdmVyaWZpY2F0aW9uLiBPbmx5IHByZXNlbnQgb24gY2FyZHMgd2l0aCBmYWlsZWQgdmVyaWZpY2F0aW9uLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIFt2ZXJpZmljYXRpb25fZmFpbGVkLCB2ZXJpZmljYXRpb25fZnJhdWRfZGV0ZWN0ZWQsIHZlcmlmaWNhdGlvbl9kZW5pZWQsIHZlcmlmaWNhdGlvbl9ub3Rfc3VwcG9ydGVkX2J5X2lzc3VlciwgdmVyaWZpY2F0aW9uX3N0b3BwZWRfYnlfaXNzdWVyLCBjYXJkX2ZhaWxlZCwgY2FyZF9pbnZhbGlkLCBjYXJkX2FkZHJlc3NfbWlzbWF0Y2gsIGNhcmRfemlwX21pc21hdGNoLCBjYXJkX2N2dl9pbnZhbGlkLCBjYXJkX2V4cGlyZWQsIGNhcmRfbGltaXRfdmlvbGF0ZWQsIGNhcmRfbm90X2hvbm9yZWQsIGNhcmRfY3Z2X3JlcXVpcmVkLCBjcmVkaXRfY2FyZF9ub3RfYWxsb3dlZCwgY2FyZF9hY2NvdW50X2luZWxpZ2libGUsIGNhcmRfbmV0d29ya191bnN1cHBvcnRlZF1cXCdcbiAqIEBleHBvcnRcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cblxuZXhwb3J0IGNvbnN0IFZlcmlmaWNhdGlvbkVycm9yQ29kZSA9IHtcbiAgVmVyaWZpY2F0aW9uRmFpbGVkOiBcInZlcmlmaWNhdGlvbl9mYWlsZWRcIixcbiAgVmVyaWZpY2F0aW9uRnJhdWREZXRlY3RlZDogXCJ2ZXJpZmljYXRpb25fZnJhdWRfZGV0ZWN0ZWRcIixcbiAgVmVyaWZpY2F0aW9uRGVuaWVkOiBcInZlcmlmaWNhdGlvbl9kZW5pZWRcIixcbiAgVmVyaWZpY2F0aW9uTm90U3VwcG9ydGVkQnlJc3N1ZXI6IFwidmVyaWZpY2F0aW9uX25vdF9zdXBwb3J0ZWRfYnlfaXNzdWVyXCIsXG4gIFZlcmlmaWNhdGlvblN0b3BwZWRCeUlzc3VlcjogXCJ2ZXJpZmljYXRpb25fc3RvcHBlZF9ieV9pc3N1ZXJcIixcbiAgQ2FyZEZhaWxlZDogXCJjYXJkX2ZhaWxlZFwiLFxuICBDYXJkSW52YWxpZDogXCJjYXJkX2ludmFsaWRcIixcbiAgQ2FyZEFkZHJlc3NNaXNtYXRjaDogXCJjYXJkX2FkZHJlc3NfbWlzbWF0Y2hcIixcbiAgQ2FyZFppcE1pc21hdGNoOiBcImNhcmRfemlwX21pc21hdGNoXCIsXG4gIENhcmRDdnZJbnZhbGlkOiBcImNhcmRfY3Z2X2ludmFsaWRcIixcbiAgQ2FyZEV4cGlyZWQ6IFwiY2FyZF9leHBpcmVkXCIsXG4gIENhcmRMaW1pdFZpb2xhdGVkOiBcImNhcmRfbGltaXRfdmlvbGF0ZWRcIixcbiAgQ2FyZE5vdEhvbm9yZWQ6IFwiY2FyZF9ub3RfaG9ub3JlZFwiLFxuICBDYXJkQ3Z2UmVxdWlyZWQ6IFwiY2FyZF9jdnZfcmVxdWlyZWRcIixcbiAgQ3JlZGl0Q2FyZE5vdEFsbG93ZWQ6IFwiY3JlZGl0X2NhcmRfbm90X2FsbG93ZWRcIixcbiAgQ2FyZEFjY291bnRJbmVsaWdpYmxlOiBcImNhcmRfYWNjb3VudF9pbmVsaWdpYmxlXCIsXG4gIENhcmROZXR3b3JrVW5zdXBwb3J0ZWQ6IFwiY2FyZF9uZXR3b3JrX3Vuc3VwcG9ydGVkXCJcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFZlcmlmaWNhdGlvbkVycm9yQ29kZSA9XG4gIHR5cGVvZiBWZXJpZmljYXRpb25FcnJvckNvZGVba2V5b2YgdHlwZW9mIFZlcmlmaWNhdGlvbkVycm9yQ29kZV07XG4iXX0=
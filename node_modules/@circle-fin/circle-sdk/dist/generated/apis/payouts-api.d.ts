/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { BusinessPayoutCreationRequest } from "../models";
import { CreateBusinessPayoutResponse } from "../models";
import { CreatePayoutResponse } from "../models";
import { CryptoPayoutCreationRequest } from "../models";
import { GetBusinessPayoutResponse } from "../models";
import { GetPayoutResponse } from "../models";
import { ListBusinessPayoutsResponse } from "../models";
import { ListPayoutsResponse } from "../models";
import { PayoutDestinationType } from "../models";
import { PayoutStatus } from "../models";
/**
 * PayoutsApi - axios parameter creator
 * @export
 */
export declare const PayoutsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a payout
     * @param {BusinessPayoutCreationRequest} [businessPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessPayout: (businessPayoutCreationRequest?: BusinessPayoutCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *  Create a crypto payout.    The following table includes the supported pairs of amount.currency and toAmount.currency for address book payouts:  | amount.currency  | toAmount.currency | | ---------------- | ------------      | | USD              | USD               | | USD              | BTC               | | USD              | ETH               | | USD              | MTC               | | EUR              | EUR               | | BTC              | USD               | | BTC              | BTC               | | ETH              | USD               | | ETH              | ETH               |
     * @summary Create a payout
     * @param {CryptoPayoutCreationRequest} [cryptoPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayout: (cryptoPayoutCreationRequest?: CryptoPayoutCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessPayout: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayout: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all payouts
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination bank account. Filters the results to fetch all payouts made to a destination bank account.
     * @param {'wire' | 'cbit'} [type] Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessPayouts: (destination?: string, type?: "wire" | "cbit", status?: Set<PayoutStatus>, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all payouts
     * @param {string} [source] Identifier for the source wallet. Filters the fetched payout results to only be from a specific source wallet. If not provided, payouts from all wallets will be returned.
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination. Filters the fetched payout results made to a specific destination. If not provided, payouts to all destinations will be returned.
     * @param {Set<PayoutDestinationType>} [type] Destination type. Filters the results to fetch all payouts made to a specified destination type. This query parameter can be passed multiple times to fetch results matching multiple destination types. The address_book destination type cannot be combined with other types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [sourceCurrency] Queries items with the specified source currency &#x60;amount.currency&#x60;. Matches any source currency if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [destinationCurrency] Queries items with the specified destination currency &#x60;toAmount.currency&#x60;. Matches any destination currency if unspecified.
     * @param {'ALGO' | 'ARB' | 'AVAX' | 'BASE' | 'BTC' | 'ETH' | 'FLOW' | 'HBAR' | 'MATIC' | 'NEAR' | 'NOBLE' | 'OP' | 'PAH' | 'POLY' | 'SOL' | 'TRX' | 'XLM'} [chain] Queries items with the specified chain. Matches any chain if unspecified
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayouts: (source?: string, destination?: string, type?: Set<PayoutDestinationType>, status?: Set<PayoutStatus>, sourceCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", destinationCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", chain?: "ALGO" | "ARB" | "AVAX" | "BASE" | "BTC" | "ETH" | "FLOW" | "HBAR" | "MATIC" | "NEAR" | "NOBLE" | "OP" | "PAH" | "POLY" | "SOL" | "TRX" | "XLM", from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PayoutsApi - functional programming interface
 * @export
 */
export declare const PayoutsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a payout
     * @param {BusinessPayoutCreationRequest} [businessPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessPayout(businessPayoutCreationRequest?: BusinessPayoutCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBusinessPayoutResponse>>;
    /**
     *  Create a crypto payout.    The following table includes the supported pairs of amount.currency and toAmount.currency for address book payouts:  | amount.currency  | toAmount.currency | | ---------------- | ------------      | | USD              | USD               | | USD              | BTC               | | USD              | ETH               | | USD              | MTC               | | EUR              | EUR               | | BTC              | USD               | | BTC              | BTC               | | ETH              | USD               | | ETH              | ETH               |
     * @summary Create a payout
     * @param {CryptoPayoutCreationRequest} [cryptoPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayout(cryptoPayoutCreationRequest?: CryptoPayoutCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePayoutResponse>>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessPayout(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessPayoutResponse>>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayout(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPayoutResponse>>;
    /**
     *
     * @summary List all payouts
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination bank account. Filters the results to fetch all payouts made to a destination bank account.
     * @param {'wire' | 'cbit'} [type] Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessPayouts(destination?: string, type?: "wire" | "cbit", status?: Set<PayoutStatus>, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBusinessPayoutsResponse>>;
    /**
     *
     * @summary List all payouts
     * @param {string} [source] Identifier for the source wallet. Filters the fetched payout results to only be from a specific source wallet. If not provided, payouts from all wallets will be returned.
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination. Filters the fetched payout results made to a specific destination. If not provided, payouts to all destinations will be returned.
     * @param {Set<PayoutDestinationType>} [type] Destination type. Filters the results to fetch all payouts made to a specified destination type. This query parameter can be passed multiple times to fetch results matching multiple destination types. The address_book destination type cannot be combined with other types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [sourceCurrency] Queries items with the specified source currency &#x60;amount.currency&#x60;. Matches any source currency if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [destinationCurrency] Queries items with the specified destination currency &#x60;toAmount.currency&#x60;. Matches any destination currency if unspecified.
     * @param {'ALGO' | 'ARB' | 'AVAX' | 'BASE' | 'BTC' | 'ETH' | 'FLOW' | 'HBAR' | 'MATIC' | 'NEAR' | 'NOBLE' | 'OP' | 'PAH' | 'POLY' | 'SOL' | 'TRX' | 'XLM'} [chain] Queries items with the specified chain. Matches any chain if unspecified
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayouts(source?: string, destination?: string, type?: Set<PayoutDestinationType>, status?: Set<PayoutStatus>, sourceCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", destinationCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", chain?: "ALGO" | "ARB" | "AVAX" | "BASE" | "BTC" | "ETH" | "FLOW" | "HBAR" | "MATIC" | "NEAR" | "NOBLE" | "OP" | "PAH" | "POLY" | "SOL" | "TRX" | "XLM", from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPayoutsResponse>>;
};
/**
 * PayoutsApi - factory interface
 * @export
 */
export declare const PayoutsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a payout
     * @param {BusinessPayoutCreationRequest} [businessPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessPayout(businessPayoutCreationRequest?: BusinessPayoutCreationRequest, options?: any): AxiosPromise<CreateBusinessPayoutResponse>;
    /**
     *  Create a crypto payout.    The following table includes the supported pairs of amount.currency and toAmount.currency for address book payouts:  | amount.currency  | toAmount.currency | | ---------------- | ------------      | | USD              | USD               | | USD              | BTC               | | USD              | ETH               | | USD              | MTC               | | EUR              | EUR               | | BTC              | USD               | | BTC              | BTC               | | ETH              | USD               | | ETH              | ETH               |
     * @summary Create a payout
     * @param {CryptoPayoutCreationRequest} [cryptoPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPayout(cryptoPayoutCreationRequest?: CryptoPayoutCreationRequest, options?: any): AxiosPromise<CreatePayoutResponse>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessPayout(id: string, options?: any): AxiosPromise<GetBusinessPayoutResponse>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayout(id: string, options?: any): AxiosPromise<GetPayoutResponse>;
    /**
     *
     * @summary List all payouts
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination bank account. Filters the results to fetch all payouts made to a destination bank account.
     * @param {'wire' | 'cbit'} [type] Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessPayouts(destination?: string, type?: "wire" | "cbit", status?: Set<PayoutStatus>, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListBusinessPayoutsResponse>;
    /**
     *
     * @summary List all payouts
     * @param {string} [source] Identifier for the source wallet. Filters the fetched payout results to only be from a specific source wallet. If not provided, payouts from all wallets will be returned.
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination. Filters the fetched payout results made to a specific destination. If not provided, payouts to all destinations will be returned.
     * @param {Set<PayoutDestinationType>} [type] Destination type. Filters the results to fetch all payouts made to a specified destination type. This query parameter can be passed multiple times to fetch results matching multiple destination types. The address_book destination type cannot be combined with other types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [sourceCurrency] Queries items with the specified source currency &#x60;amount.currency&#x60;. Matches any source currency if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [destinationCurrency] Queries items with the specified destination currency &#x60;toAmount.currency&#x60;. Matches any destination currency if unspecified.
     * @param {'ALGO' | 'ARB' | 'AVAX' | 'BASE' | 'BTC' | 'ETH' | 'FLOW' | 'HBAR' | 'MATIC' | 'NEAR' | 'NOBLE' | 'OP' | 'PAH' | 'POLY' | 'SOL' | 'TRX' | 'XLM'} [chain] Queries items with the specified chain. Matches any chain if unspecified
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPayouts(source?: string, destination?: string, type?: Set<PayoutDestinationType>, status?: Set<PayoutStatus>, sourceCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", destinationCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", chain?: "ALGO" | "ARB" | "AVAX" | "BASE" | "BTC" | "ETH" | "FLOW" | "HBAR" | "MATIC" | "NEAR" | "NOBLE" | "OP" | "PAH" | "POLY" | "SOL" | "TRX" | "XLM", from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<ListPayoutsResponse>;
};
/**
 * PayoutsApi - object-oriented interface
 * @export
 * @class PayoutsApi
 * @extends {BaseAPI}
 */
export declare class PayoutsApi extends BaseAPI {
    /**
     *
     * @summary Create a payout
     * @param {BusinessPayoutCreationRequest} [businessPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    createBusinessPayout(businessPayoutCreationRequest?: BusinessPayoutCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateBusinessPayoutResponse, any>>;
    /**
     *  Create a crypto payout.    The following table includes the supported pairs of amount.currency and toAmount.currency for address book payouts:  | amount.currency  | toAmount.currency | | ---------------- | ------------      | | USD              | USD               | | USD              | BTC               | | USD              | ETH               | | USD              | MTC               | | EUR              | EUR               | | BTC              | USD               | | BTC              | BTC               | | ETH              | USD               | | ETH              | ETH               |
     * @summary Create a payout
     * @param {CryptoPayoutCreationRequest} [cryptoPayoutCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    createPayout(cryptoPayoutCreationRequest?: CryptoPayoutCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreatePayoutResponse, any>>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    getBusinessPayout(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBusinessPayoutResponse, any>>;
    /**
     *
     * @summary Get a payout
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    getPayout(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetPayoutResponse, any>>;
    /**
     *
     * @summary List all payouts
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination bank account. Filters the results to fetch all payouts made to a destination bank account.
     * @param {'wire' | 'cbit'} [type] Destination bank account type. Filters the results to fetch all payouts made to a specified destination bank account type. This query parameter can be passed multiple times to fetch results matching multiple destination bank account types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    listBusinessPayouts(destination?: string, type?: "wire" | "cbit", status?: Set<PayoutStatus>, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBusinessPayoutsResponse, any>>;
    /**
     *
     * @summary List all payouts
     * @param {string} [source] Identifier for the source wallet. Filters the fetched payout results to only be from a specific source wallet. If not provided, payouts from all wallets will be returned.
     * @param {string} [destination] Universally unique identifier (UUID v4) for the destination. Filters the fetched payout results made to a specific destination. If not provided, payouts to all destinations will be returned.
     * @param {Set<PayoutDestinationType>} [type] Destination type. Filters the results to fetch all payouts made to a specified destination type. This query parameter can be passed multiple times to fetch results matching multiple destination types. The address_book destination type cannot be combined with other types.
     * @param {Set<PayoutStatus>} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [sourceCurrency] Queries items with the specified source currency &#x60;amount.currency&#x60;. Matches any source currency if unspecified.
     * @param {'USD' | 'EUR' | 'BTC' | 'ETH' | 'MTC' | 'FLW' | 'MAN'} [destinationCurrency] Queries items with the specified destination currency &#x60;toAmount.currency&#x60;. Matches any destination currency if unspecified.
     * @param {'ALGO' | 'ARB' | 'AVAX' | 'BASE' | 'BTC' | 'ETH' | 'FLOW' | 'HBAR' | 'MATIC' | 'NEAR' | 'NOBLE' | 'OP' | 'PAH' | 'POLY' | 'SOL' | 'TRX' | 'XLM'} [chain] Queries items with the specified chain. Matches any chain if unspecified
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    listPayouts(source?: string, destination?: string, type?: Set<PayoutDestinationType>, status?: Set<PayoutStatus>, sourceCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", destinationCurrency?: "USD" | "EUR" | "BTC" | "ETH" | "MTC" | "FLW" | "MAN", chain?: "ALGO" | "ARB" | "AVAX" | "BASE" | "BTC" | "ETH" | "FLOW" | "HBAR" | "MATIC" | "NEAR" | "NOBLE" | "OP" | "PAH" | "POLY" | "SOL" | "TRX" | "XLM", from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListPayoutsResponse, any>>;
}

"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionApi = exports.EncryptionApiFactory = exports.EncryptionApiFp = exports.EncryptionApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * EncryptionApi - axios parameter creator
 * @export
 */
const EncryptionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves an RSA public key to be used in encrypting data sent to the API. Your public keys change infrequently, so we encourage you to cache this response value locally for a duration of 24 hours or more.
         * @summary Get public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKey: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/encryption/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.EncryptionApiAxiosParamCreator = EncryptionApiAxiosParamCreator;
/**
 * EncryptionApi - functional programming interface
 * @export
 */
const EncryptionApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.EncryptionApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieves an RSA public key to be used in encrypting data sent to the API. Your public keys change infrequently, so we encourage you to cache this response value locally for a duration of 24 hours or more.
         * @summary Get public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKey(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPublicKey(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.EncryptionApiFp = EncryptionApiFp;
/**
 * EncryptionApi - factory interface
 * @export
 */
const EncryptionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.EncryptionApiFp)(configuration);
    return {
        /**
         * Retrieves an RSA public key to be used in encrypting data sent to the API. Your public keys change infrequently, so we encourage you to cache this response value locally for a duration of 24 hours or more.
         * @summary Get public key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKey(options) {
            return localVarFp
                .getPublicKey(options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.EncryptionApiFactory = EncryptionApiFactory;
/**
 * EncryptionApi - object-oriented interface
 * @export
 * @class EncryptionApi
 * @extends {BaseAPI}
 */
class EncryptionApi extends base_1.BaseAPI {
    /**
     * Retrieves an RSA public key to be used in encrypting data sent to the API. Your public keys change infrequently, so we encourage you to cache this response value locally for a duration of 24 hours or more.
     * @summary Get public key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncryptionApi
     */
    getPublicKey(options) {
        return (0, exports.EncryptionApiFp)(this.configuration)
            .getPublicKey(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.EncryptionApi = EncryptionApi;
//# sourceMappingURL=data:application/json;base64,
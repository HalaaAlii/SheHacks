"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BalancesApi = exports.BalancesApiFactory = exports.BalancesApiFp = exports.BalancesApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BalancesApi - axios parameter creator
 * @export
 */
const BalancesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves the balance of merchant funds that have settled and also of funds that have been sent for processing but have not yet settled.
         * @summary List all balances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBalances: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * Retrieves the balance of funds that are available for use.
         * @summary List all balances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessBalances: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/balances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.BalancesApiAxiosParamCreator = BalancesApiAxiosParamCreator;
/**
 * BalancesApi - functional programming interface
 * @export
 */
const BalancesApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BalancesApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieves the balance of merchant funds that have settled and also of funds that have been sent for processing but have not yet settled.
         * @summary List all balances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBalances(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listBalances(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Retrieves the balance of funds that are available for use.
         * @summary List all balances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessBalances(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listBusinessBalances(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.BalancesApiFp = BalancesApiFp;
/**
 * BalancesApi - factory interface
 * @export
 */
const BalancesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BalancesApiFp)(configuration);
    return {
        /**
         * Retrieves the balance of merchant funds that have settled and also of funds that have been sent for processing but have not yet settled.
         * @summary List all balances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBalances(options) {
            return localVarFp
                .listBalances(options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the balance of funds that are available for use.
         * @summary List all balances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessBalances(options) {
            return localVarFp
                .listBusinessBalances(options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.BalancesApiFactory = BalancesApiFactory;
/**
 * BalancesApi - object-oriented interface
 * @export
 * @class BalancesApi
 * @extends {BaseAPI}
 */
class BalancesApi extends base_1.BaseAPI {
    /**
     * Retrieves the balance of merchant funds that have settled and also of funds that have been sent for processing but have not yet settled.
     * @summary List all balances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    listBalances(options) {
        return (0, exports.BalancesApiFp)(this.configuration)
            .listBalances(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Retrieves the balance of funds that are available for use.
     * @summary List all balances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalancesApi
     */
    listBusinessBalances(options) {
        return (0, exports.BalancesApiFp)(this.configuration)
            .listBusinessBalances(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.BalancesApi = BalancesApi;
//# sourceMappingURL=data:application/json;base64,
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StablecoinsApi = exports.StablecoinsApiFactory = exports.StablecoinsApiFp = exports.StablecoinsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * StablecoinsApi - axios parameter creator
 * @export
 */
const StablecoinsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Retrieves total circulating supply for supported stablecoins across all chains. This endpoint is rate limited to one call per minute (based on IP).
         * @summary List all stablecoins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStablecoins: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/stablecoins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.StablecoinsApiAxiosParamCreator = StablecoinsApiAxiosParamCreator;
/**
 * StablecoinsApi - functional programming interface
 * @export
 */
const StablecoinsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StablecoinsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Retrieves total circulating supply for supported stablecoins across all chains. This endpoint is rate limited to one call per minute (based on IP).
         * @summary List all stablecoins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStablecoins(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStablecoins(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.StablecoinsApiFp = StablecoinsApiFp;
/**
 * StablecoinsApi - factory interface
 * @export
 */
const StablecoinsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StablecoinsApiFp)(configuration);
    return {
        /**
         * Retrieves total circulating supply for supported stablecoins across all chains. This endpoint is rate limited to one call per minute (based on IP).
         * @summary List all stablecoins
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStablecoins(options) {
            return localVarFp
                .listStablecoins(options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.StablecoinsApiFactory = StablecoinsApiFactory;
/**
 * StablecoinsApi - object-oriented interface
 * @export
 * @class StablecoinsApi
 * @extends {BaseAPI}
 */
class StablecoinsApi extends base_1.BaseAPI {
    /**
     * Retrieves total circulating supply for supported stablecoins across all chains. This endpoint is rate limited to one call per minute (based on IP).
     * @summary List all stablecoins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StablecoinsApi
     */
    listStablecoins(options) {
        return (0, exports.StablecoinsApiFp)(this.configuration)
            .listStablecoins(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.StablecoinsApi = StablecoinsApi;
//# sourceMappingURL=data:application/json;base64,
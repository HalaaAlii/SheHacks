/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { CreateCryptoPaymentResponse } from "../models";
import { CreateCryptoPaymentResponse1 } from "../models";
import { CryptoPaymentCreationRequest } from "../models";
/**
 * PullCryptoPaymentsApi - axios parameter creator
 * @export
 */
export declare const PullCryptoPaymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a crypto payment
     * @param {CryptoPaymentCreationRequest} [cryptoPaymentCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCryptoPayment: (cryptoPaymentCreationRequest?: CryptoPaymentCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a typed message for signing
     * @param {string} endUserAddress User wallet address
     * @param {string} paymentIntentId Payment intent id which is from the create payment intent endpoint response
     * @param {string} [amount]
     * @param {'USD'} [currency] Only support USD at the moment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    presign: (endUserAddress: string, paymentIntentId: string, amount?: string, currency?: "USD", options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PullCryptoPaymentsApi - functional programming interface
 * @export
 */
export declare const PullCryptoPaymentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a crypto payment
     * @param {CryptoPaymentCreationRequest} [cryptoPaymentCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCryptoPayment(cryptoPaymentCreationRequest?: CryptoPaymentCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCryptoPaymentResponse>>;
    /**
     *
     * @summary Get a typed message for signing
     * @param {string} endUserAddress User wallet address
     * @param {string} paymentIntentId Payment intent id which is from the create payment intent endpoint response
     * @param {string} [amount]
     * @param {'USD'} [currency] Only support USD at the moment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    presign(endUserAddress: string, paymentIntentId: string, amount?: string, currency?: "USD", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCryptoPaymentResponse1>>;
};
/**
 * PullCryptoPaymentsApi - factory interface
 * @export
 */
export declare const PullCryptoPaymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a crypto payment
     * @param {CryptoPaymentCreationRequest} [cryptoPaymentCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCryptoPayment(cryptoPaymentCreationRequest?: CryptoPaymentCreationRequest, options?: any): AxiosPromise<CreateCryptoPaymentResponse>;
    /**
     *
     * @summary Get a typed message for signing
     * @param {string} endUserAddress User wallet address
     * @param {string} paymentIntentId Payment intent id which is from the create payment intent endpoint response
     * @param {string} [amount]
     * @param {'USD'} [currency] Only support USD at the moment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    presign(endUserAddress: string, paymentIntentId: string, amount?: string, currency?: "USD", options?: any): AxiosPromise<CreateCryptoPaymentResponse1>;
};
/**
 * PullCryptoPaymentsApi - object-oriented interface
 * @export
 * @class PullCryptoPaymentsApi
 * @extends {BaseAPI}
 */
export declare class PullCryptoPaymentsApi extends BaseAPI {
    /**
     *
     * @summary Create a crypto payment
     * @param {CryptoPaymentCreationRequest} [cryptoPaymentCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullCryptoPaymentsApi
     */
    createCryptoPayment(cryptoPaymentCreationRequest?: CryptoPaymentCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCryptoPaymentResponse, any>>;
    /**
     *
     * @summary Get a typed message for signing
     * @param {string} endUserAddress User wallet address
     * @param {string} paymentIntentId Payment intent id which is from the create payment intent endpoint response
     * @param {string} [amount]
     * @param {'USD'} [currency] Only support USD at the moment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PullCryptoPaymentsApi
     */
    presign(endUserAddress: string, paymentIntentId: string, amount?: string, currency?: "USD", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCryptoPaymentResponse1, any>>;
}

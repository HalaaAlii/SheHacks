/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { GetExchangeRatesResponse } from "../models";
/**
 * CryptoExchangeRatesApi - axios parameter creator
 * @export
 */
export declare const CryptoExchangeRatesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch the current rates for the specified trading pair. The trading pair is defined by a base currency followed by a quote currency. The response contains buy and sell rates denominated in the quote currency. **Exchange rate is an estimate only and is subject to change by the time you submit the actual request.**
     * @summary Get a exchange rate
     * @param {'BTC-USD' | 'ETH-USD' | 'FLOW-USD'} tradingPair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeRates: (tradingPair: "BTC-USD" | "ETH-USD" | "FLOW-USD", options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CryptoExchangeRatesApi - functional programming interface
 * @export
 */
export declare const CryptoExchangeRatesApiFp: (configuration?: Configuration) => {
    /**
     * Fetch the current rates for the specified trading pair. The trading pair is defined by a base currency followed by a quote currency. The response contains buy and sell rates denominated in the quote currency. **Exchange rate is an estimate only and is subject to change by the time you submit the actual request.**
     * @summary Get a exchange rate
     * @param {'BTC-USD' | 'ETH-USD' | 'FLOW-USD'} tradingPair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeRates(tradingPair: "BTC-USD" | "ETH-USD" | "FLOW-USD", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetExchangeRatesResponse>>;
};
/**
 * CryptoExchangeRatesApi - factory interface
 * @export
 */
export declare const CryptoExchangeRatesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch the current rates for the specified trading pair. The trading pair is defined by a base currency followed by a quote currency. The response contains buy and sell rates denominated in the quote currency. **Exchange rate is an estimate only and is subject to change by the time you submit the actual request.**
     * @summary Get a exchange rate
     * @param {'BTC-USD' | 'ETH-USD' | 'FLOW-USD'} tradingPair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExchangeRates(tradingPair: "BTC-USD" | "ETH-USD" | "FLOW-USD", options?: any): AxiosPromise<GetExchangeRatesResponse>;
};
/**
 * CryptoExchangeRatesApi - object-oriented interface
 * @export
 * @class CryptoExchangeRatesApi
 * @extends {BaseAPI}
 */
export declare class CryptoExchangeRatesApi extends BaseAPI {
    /**
     * Fetch the current rates for the specified trading pair. The trading pair is defined by a base currency followed by a quote currency. The response contains buy and sell rates denominated in the quote currency. **Exchange rate is an estimate only and is subject to change by the time you submit the actual request.**
     * @summary Get a exchange rate
     * @param {'BTC-USD' | 'ETH-USD' | 'FLOW-USD'} tradingPair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoExchangeRatesApi
     */
    getExchangeRates(tradingPair: "BTC-USD" | "ETH-USD" | "FLOW-USD", options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetExchangeRatesResponse, any>>;
}

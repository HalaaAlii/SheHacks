/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { CbitFiatAccountCreationRequest } from "../models";
import { CreateBusinessCbitAccountResponse } from "../models";
import { GetBusinessCbitAccountResponse } from "../models";
import { ListBusinessCbitAccountInstructionsResponse } from "../models";
import { ListBusinessCbitAccountsResponse } from "../models";
/**
 * CBITApi - axios parameter creator
 * @export
 */
export declare const CBITApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a CBIT bank account
     * @param {CbitFiatAccountCreationRequest} [cbitFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessCbitAccount: (cbitFiatAccountCreationRequest?: CbitFiatAccountCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a CBIT bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCbitAccount: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get the CBIT transfer instructions into the Circle bank account given your bank account id.
     * @summary Get CBIT instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCbitAccountInstructions: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all CBIT bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessCbitAccounts: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CBITApi - functional programming interface
 * @export
 */
export declare const CBITApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a CBIT bank account
     * @param {CbitFiatAccountCreationRequest} [cbitFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessCbitAccount(cbitFiatAccountCreationRequest?: CbitFiatAccountCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBusinessCbitAccountResponse>>;
    /**
     *
     * @summary Get a CBIT bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCbitAccount(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessCbitAccountResponse>>;
    /**
     * Get the CBIT transfer instructions into the Circle bank account given your bank account id.
     * @summary Get CBIT instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCbitAccountInstructions(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBusinessCbitAccountInstructionsResponse>>;
    /**
     *
     * @summary List all CBIT bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessCbitAccounts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBusinessCbitAccountsResponse>>;
};
/**
 * CBITApi - factory interface
 * @export
 */
export declare const CBITApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a CBIT bank account
     * @param {CbitFiatAccountCreationRequest} [cbitFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessCbitAccount(cbitFiatAccountCreationRequest?: CbitFiatAccountCreationRequest, options?: any): AxiosPromise<CreateBusinessCbitAccountResponse>;
    /**
     *
     * @summary Get a CBIT bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCbitAccount(id: string, options?: any): AxiosPromise<GetBusinessCbitAccountResponse>;
    /**
     * Get the CBIT transfer instructions into the Circle bank account given your bank account id.
     * @summary Get CBIT instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessCbitAccountInstructions(id: string, options?: any): AxiosPromise<ListBusinessCbitAccountInstructionsResponse>;
    /**
     *
     * @summary List all CBIT bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listBusinessCbitAccounts(options?: any): AxiosPromise<ListBusinessCbitAccountsResponse>;
};
/**
 * CBITApi - object-oriented interface
 * @export
 * @class CBITApi
 * @extends {BaseAPI}
 */
export declare class CBITApi extends BaseAPI {
    /**
     *
     * @summary Create a CBIT bank account
     * @param {CbitFiatAccountCreationRequest} [cbitFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBITApi
     */
    createBusinessCbitAccount(cbitFiatAccountCreationRequest?: CbitFiatAccountCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateBusinessCbitAccountResponse, any>>;
    /**
     *
     * @summary Get a CBIT bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBITApi
     */
    getBusinessCbitAccount(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetBusinessCbitAccountResponse, any>>;
    /**
     * Get the CBIT transfer instructions into the Circle bank account given your bank account id.
     * @summary Get CBIT instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBITApi
     */
    getBusinessCbitAccountInstructions(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBusinessCbitAccountInstructionsResponse, any>>;
    /**
     *
     * @summary List all CBIT bank accounts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CBITApi
     */
    listBusinessCbitAccounts(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBusinessCbitAccountsResponse, any>>;
}

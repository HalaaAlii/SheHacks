"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentTokensApi = exports.PaymentTokensApiFactory = exports.PaymentTokensApiFp = exports.PaymentTokensApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PaymentTokensApi - axios parameter creator
 * @export
 */
const PaymentTokensApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Convert a digital wallet (Apple Pay, Google Pay) token to a single-use payment token.
         * @summary Create a payment token
         * @param {PaymentTokenRequest} [paymentTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken: (paymentTokenRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/paymentTokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paymentTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.PaymentTokensApiAxiosParamCreator = PaymentTokensApiAxiosParamCreator;
/**
 * PaymentTokensApi - functional programming interface
 * @export
 */
const PaymentTokensApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaymentTokensApiAxiosParamCreator)(configuration);
    return {
        /**
         * Convert a digital wallet (Apple Pay, Google Pay) token to a single-use payment token.
         * @summary Create a payment token
         * @param {PaymentTokenRequest} [paymentTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentTokenRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPaymentToken(paymentTokenRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.PaymentTokensApiFp = PaymentTokensApiFp;
/**
 * PaymentTokensApi - factory interface
 * @export
 */
const PaymentTokensApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaymentTokensApiFp)(configuration);
    return {
        /**
         * Convert a digital wallet (Apple Pay, Google Pay) token to a single-use payment token.
         * @summary Create a payment token
         * @param {PaymentTokenRequest} [paymentTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentToken(paymentTokenRequest, options) {
            return localVarFp
                .createPaymentToken(paymentTokenRequest, options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.PaymentTokensApiFactory = PaymentTokensApiFactory;
/**
 * PaymentTokensApi - object-oriented interface
 * @export
 * @class PaymentTokensApi
 * @extends {BaseAPI}
 */
class PaymentTokensApi extends base_1.BaseAPI {
    /**
     * Convert a digital wallet (Apple Pay, Google Pay) token to a single-use payment token.
     * @summary Create a payment token
     * @param {PaymentTokenRequest} [paymentTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTokensApi
     */
    createPaymentToken(paymentTokenRequest, options) {
        return (0, exports.PaymentTokensApiFp)(this.configuration)
            .createPaymentToken(paymentTokenRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PaymentTokensApi = PaymentTokensApi;
//# sourceMappingURL=data:application/json;base64,
"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const packageJson = require("../../package.json");
class Configuration {
    constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions)
            this.baseOptions = {};
        if (!this.baseOptions.headers)
            this.baseOptions.headers = {};
        this.baseOptions.headers = Object.assign({ ["User-Agent"]: `CircleNodeJs/${packageJson.version}` }, this.baseOptions.headers);
    }
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$", "i");
        return (mime !== null &&
            (jsonMime.test(mime) ||
                mime.toLowerCase() === "application/json-patch+json"));
    }
}
exports.Configuration = Configuration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZW5lcmF0ZWQvY29uZmlndXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7OztHQUlHOzs7QUFFSCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQWFsRCxNQUFhLGFBQWE7SUFrQ3hCLFlBQVksUUFBaUMsRUFBRTtRQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFFdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sbUJBQ3RCLENBQUMsWUFBWSxDQUFDLEVBQUUsZ0JBQWdCLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFDbEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0ksVUFBVSxDQUFDLElBQVk7UUFDNUIsTUFBTSxRQUFRLEdBQVcsSUFBSSxNQUFNLENBQ2pDLDZEQUE2RCxFQUM3RCxHQUFHLENBQ0osQ0FBQztRQUNGLE9BQU8sQ0FDTCxJQUFJLEtBQUssSUFBSTtZQUNiLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyw2QkFBNkIsQ0FBQyxDQUN4RCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBckVELHNDQXFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cblxuY29uc3QgcGFja2FnZUpzb24gPSByZXF1aXJlKFwiLi4vLi4vcGFja2FnZS5qc29uXCIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzIHtcbiAgYXBpS2V5PzpcbiAgICB8IHN0cmluZ1xuICAgIHwgUHJvbWlzZTxzdHJpbmc+XG4gICAgfCAoKG5hbWU6IHN0cmluZykgPT4gc3RyaW5nKVxuICAgIHwgKChuYW1lOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPik7XG4gIGJhc2VQYXRoPzogc3RyaW5nO1xuICBiYXNlT3B0aW9ucz86IGFueTtcbiAgZm9ybURhdGFDdG9yPzogbmV3ICgpID0+IGFueTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogcGFyYW1ldGVyIGZvciBhcGlLZXkgc2VjdXJpdHlcbiAgICogQHBhcmFtIG5hbWUgc2VjdXJpdHkgbmFtZVxuICAgKiBAbWVtYmVyb2YgQ29uZmlndXJhdGlvblxuICAgKi9cbiAgYXBpS2V5PzpcbiAgICB8IHN0cmluZ1xuICAgIHwgUHJvbWlzZTxzdHJpbmc+XG4gICAgfCAoKG5hbWU6IHN0cmluZykgPT4gc3RyaW5nKVxuICAgIHwgKChuYW1lOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPik7XG4gIC8qKlxuICAgKiBvdmVycmlkZSBiYXNlIHBhdGhcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIENvbmZpZ3VyYXRpb25cbiAgICovXG4gIGJhc2VQYXRoPzogc3RyaW5nO1xuICAvKipcbiAgICogYmFzZSBvcHRpb25zIGZvciBheGlvcyBjYWxsc1xuICAgKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKiBAbWVtYmVyb2YgQ29uZmlndXJhdGlvblxuICAgKi9cbiAgYmFzZU9wdGlvbnM/OiBhbnk7XG4gIC8qKlxuICAgKiBUaGUgRm9ybURhdGEgY29uc3RydWN0b3IgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIG11bHRpcGFydCBmb3JtIGRhdGFcbiAgICogcmVxdWVzdHMuIFlvdSBjYW4gaW5qZWN0IHRoaXMgaGVyZSBzbyB0aGF0IGV4ZWN1dGlvbiBlbnZpcm9ubWVudHMgdGhhdFxuICAgKiBkbyBub3Qgc3VwcG9ydCB0aGUgRm9ybURhdGEgY2xhc3MgY2FuIHN0aWxsIHJ1biB0aGUgZ2VuZXJhdGVkIGNsaWVudC5cbiAgICpcbiAgICogQHR5cGUge25ldyAoKSA9PiBGb3JtRGF0YX1cbiAgICovXG4gIGZvcm1EYXRhQ3Rvcj86IG5ldyAoKSA9PiBhbnk7XG5cbiAgY29uc3RydWN0b3IocGFyYW06IENvbmZpZ3VyYXRpb25QYXJhbWV0ZXJzID0ge30pIHtcbiAgICB0aGlzLmFwaUtleSA9IHBhcmFtLmFwaUtleTtcbiAgICB0aGlzLmJhc2VQYXRoID0gcGFyYW0uYmFzZVBhdGg7XG4gICAgdGhpcy5iYXNlT3B0aW9ucyA9IHBhcmFtLmJhc2VPcHRpb25zO1xuICAgIHRoaXMuZm9ybURhdGFDdG9yID0gcGFyYW0uZm9ybURhdGFDdG9yO1xuXG4gICAgaWYgKCF0aGlzLmJhc2VPcHRpb25zKSB0aGlzLmJhc2VPcHRpb25zID0ge307XG4gICAgaWYgKCF0aGlzLmJhc2VPcHRpb25zLmhlYWRlcnMpIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICAgIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgIFtcIlVzZXItQWdlbnRcIl06IGBDaXJjbGVOb2RlSnMvJHtwYWNrYWdlSnNvbi52ZXJzaW9ufWAsXG4gICAgICAuLi50aGlzLmJhc2VPcHRpb25zLmhlYWRlcnNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiBNSU1FIGlzIGEgSlNPTiBNSU1FLlxuICAgKiBKU09OIE1JTUUgZXhhbXBsZXM6XG4gICAqICAgYXBwbGljYXRpb24vanNvblxuICAgKiAgIGFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGOFxuICAgKiAgIEFQUExJQ0FUSU9OL0pTT05cbiAgICogICBhcHBsaWNhdGlvbi92bmQuY29tcGFueStqc29uXG4gICAqIEBwYXJhbSBtaW1lIC0gTUlNRSAoTXVsdGlwdXJwb3NlIEludGVybmV0IE1haWwgRXh0ZW5zaW9ucylcbiAgICogQHJldHVybiBUcnVlIGlmIHRoZSBnaXZlbiBNSU1FIGlzIEpTT04sIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIHB1YmxpYyBpc0pzb25NaW1lKG1pbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGpzb25NaW1lOiBSZWdFeHAgPSBuZXcgUmVnRXhwKFxuICAgICAgXCJeKGFwcGxpY2F0aW9uL2pzb258W147LyBcXHRdKy9bXjsvIFxcdF0rWytdanNvbilbIFxcdF0qKDsuKik/JFwiLFxuICAgICAgXCJpXCJcbiAgICApO1xuICAgIHJldHVybiAoXG4gICAgICBtaW1lICE9PSBudWxsICYmXG4gICAgICAoanNvbk1pbWUudGVzdChtaW1lKSB8fFxuICAgICAgICBtaW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYXBwbGljYXRpb24vanNvbi1wYXRjaCtqc29uXCIpXG4gICAgKTtcbiAgfVxufVxuIl19